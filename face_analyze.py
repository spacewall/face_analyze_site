import os
import streamlit as st
from streamlit_echarts import st_echarts
from camera_input_live import camera_input_live
from deepface import DeepFace
from PIL import Image

def update_and_save_img(img_file_buffer) -> None:
    if "img.jpg" in os.listdir():
        os.remove("img.jpg")
    
    try:
        img = Image.open(img_file_buffer)
        img.save("img.jpg")
    except AttributeError as error:
        return error

def face_analyze(camera_handler):
    try:
        return DeepFace.analyze(camera_handler, ('emotion', 'age', 'gender', 'race'))
    except ValueError:
        return None

def draw_pie(data):
    options = {
        "tooltip": {"trigger": "item"},
        "legend": {"top": "5%", "left": "center"},
        "series": [
            {
                "name": "pie",
                "type": "pie",
                "radius": ["40%", "70%"],
                "avoidLabelOverlap": False,
                "itemStyle": {
                    "borderRadius": 10,
                    "borderColor": "#fff",
                    "borderWidth": 2,
                },
                "label": {"show": False, "position": "center"},
                "emphasis": {
                    "label": {"show": True, "fontSize": "40", "fontWeight": "bold"}
                },
                "labelLine": {"show": False},
                "data": [],
            }
        ],
    }

    options["series"][0]["data"] += data

    st_echarts(
        options=options, height="450px",
    )

st.title("Deep Face Analyze Technology", anchor=False)
st.divider()
col_1, col_2 = st.columns(2)
with col_1:
    st.subheader(":blue[–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏]")
    st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å, –∞ —Ç–∞–∫–∂–µ —ç–º–æ—Ü–∏—é –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

with col_2:
    st.subheader(":blue[–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?]")
    st.write("–í –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –≤—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç 'Print', —á—Ç–æ–±—ã —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º 'ctrl + s', —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.")

st.divider()
img_file_buffer = camera_input_live(":blue[–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —Ñ–æ—Ç–æ]")

col_3, col_4 = st.columns(2)

if img_file_buffer is not None:
    update_and_save_img(img_file_buffer)
    
    try:
        with st.spinner('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è‚Ä¶'):
            result = face_analyze("img.jpg")

            data = result[0]

            emotions = list()
            for key, value in data.get("emotion").items():
                emotions.append({"value": round(value, 2), "name": key})

            races = list()
            for key, value in data.get("race").items():
                races.append({"value": round(value, 2), "name": key})

        with col_3:
            st.subheader(":blue[Races]")
            draw_pie(races)
            st.caption(f"Dominant race: {data.get('dominant_race')}")

            st.subheader(":blue[Age]")
            st.write(f"Your age is {data.get('age')}")

        with col_4:
            st.subheader(":blue[Emotions]")
            draw_pie(emotions)
            st.caption(f"Dominant emotion: {data.get('dominant_emotion')}.")

            st.subheader(":blue[Gender]")
            st.write(f"Your gender is {data.get('dominant_gender')}.")
    except TypeError:
        st.warning("–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å!", icon="üö®")      
