include:
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml

default:
  tags:
    - docker

stages:
  - build
  - test
  - deploy
  - release

variables:
  IMAGE_NAME: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}"

container_scanning:
  variables:
    CS_IMAGE: $IMAGE_NAME

kaniko-build:
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  stage: build
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${IMAGE_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

test_container:
  stage: test
  image:
    name: $IMAGE_NAME
    entrypoint: [""]
  script:
    - pytest

pylint:
  stage: test
  image: ubuntu:23.04
  before_script:
    - apt update
    - apt install -y python3 python3-pip
    - pip install pylint-gitlab
  script:
    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py") > codeclimate.json
  artifacts:
    reports:
      codequality: codeclimate.json
    when: always

trivy_scan:
  stage: test
  tags:
    - shell  
  script:
    - trivy image --exit-code 0 --output trivy.txt $IMAGE_NAME
  artifacts:
    paths:
      - trivy.txt

deploy_deploy:
  tags:
    - shell
  stage: deploy
  script:
    - docker stop ${CONTAINER_NAME} || true
    - docker rm -f ${CONTAINER_NAME} || true
    - docker pull ${IMAGE_NAME}
    - docker run --name ${CONTAINER_NAME} -d -p ${APP_PORT}:80 ${IMAGE_NAME}
  when: manual
  environment:
    name: staging
    url: http://$APP_ADDRESS:$APP_PORT
    on_stop: deploy_stop

dast-scan:
  stage: deploy
  image:
    name: owasp/zap2docker-stable
  when: manual
  script:
    - mkdir -p /zap/wrk
    - zap-full-scan.py -t "http://$APP_ADDRESS:$APP_PORT" -I -J zap.json
    - cp /zap/wrk/zap.json .
  artifacts:
    when: always
    paths:
      - zap.json

deploy_stop:
  tags:
    - shell
  stage: deploy
  script:
    - docker stop ${CONTAINER_NAME} || true
    - docker rm -f ${CONTAINER_NAME} || true
  when: manual
  environment:
    name: staging
    action: stop

release:
  stage: release
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [""]
  when: manual
  script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane tag $IMAGE_NAME $CI_COMMIT_TAG
